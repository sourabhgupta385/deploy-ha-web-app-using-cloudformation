Description: This template deploys network infrastructure needed for Udagram web application.

Parameters:
    EnvironmentName:
        Description: This name will be prefixed to all the resources.
        Type: String
    VpcCIDR:
        Description: CIDR for Udagram App VPC
        Type: String
        Default: 10.0.0.0/16
    PublicSubnet1CIDR:
        Description: CIDR for Udagram App Public Subnet 1
        Type: String
        Default: 10.0.0.0/24
    PublicSubnet2CIDR:
        Description: CIDR for Udagram App Public Subnet 2
        Type: String
        Default: 10.0.1.0/24
    PrivateSubnet1CIDR:
        Description: CIDR for Udagram App Private Subnet 1
        Type: String
        Default: 10.0.2.0/24
    PrivateSubnet2CIDR:
        Description: CIDR for Udagram App Private Subnet 2
        Type: String
        Default: 10.0.3.0/24

Resources:
    ## VPC ##

    #VPC for Udagram App
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    ## Internet Gateway ##

    #Internet Gateway that provides bi-directional access for the resources within VPC
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    # Attachment of Internet Gateway to VPC
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    ## Subnets ##

    #First public subnet on one AZ
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [0, !GetAZs ""]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    # Second public subnet in another AZ
    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [1, !GetAZs ""]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    # First private subnet in one AZ
    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [0, !GetAZs ""]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    # Second private subnet in another AZ
    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [1, !GetAZs ""]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    ## Network Address Translation (NAT) Gateways ##

    # Elastic IP for first NAT Gateway
    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    # Elastic IP for second NAT Gateway
    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    # First NAT Gateway that uses first elastic IP created above
    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    # Second NAT Gateway that uses second elastic IP created above
    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    ## Routing Configuration ##

    # Public route table attached with VPC
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Routes

    # Rule that directs all traffic to Internet Gateway
    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    # Associating public route table with first public subnet
    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    # Associating public route table with second public subnet
    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    # First private route table attached with VPC
    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    # Rule that direct all internal traffic to first NAT Gateway
    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    # Associating first private route table with first private subnet
    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    # Second private route table attached with VPC
    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    # Rule that direct all internal traffic to second NAT Gateway
    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    # Associating second private route table with second private subnet
    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

Outputs:
    VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
            Name: !Sub ${EnvironmentName}-VPCID

    VPCPublicRouteTable:
        Description: Public Routing to Load Balancer in Public Subnet
        Value: !Ref PublicRouteTable
        Export:
            Name: !Sub ${EnvironmentName}-PUB-RT

    VPCPrivateRouteTable01:
        Description: Private Routing to PrivateSubnet01
        Value: !Ref PrivateRouteTable1
        Export:
            Name: !Sub ${EnvironmentName}-PRI-RT01

    VPCPrivateRouteTable02:
        Description: Private Routing to PrivateSubnet02
        Value: !Ref PrivateRouteTable2
        Export:
            Name: !Sub ${EnvironmentName}-PRI-RT02

    PublicSubnets:
        Description: A list of the public subnets in the project
        Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
        Export:
            Name: !Sub ${EnvironmentName}-PUB-NETS

    PublicSubnet01:
        Description: A reference to the public subnet in AZ-A
        Value: !Ref PublicSubnet1
        Export:
            Name: !Sub ${EnvironmentName}-PUB-SN01

    PublicSubnet02:
        Description: A reference to the public subnet in AZ-B
        Value: !Ref PublicSubnet2
        Export:
            Name: !Sub ${EnvironmentName}-PUB-SN02

    PrivateSubnets:
        Description: A list of the private subnets in the project
        Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
        Export:
            Name: !Sub ${EnvironmentName}-PRI-NETS

    PrivateSubnet01:
        Description: A reference to the private subnet in AZ-A
        Value: !Ref PrivateSubnet1
        Export:
            Name: !Sub ${EnvironmentName}-PRI-SN01

    PrivateSubnet02:
        Description: A reference to the private subnet in AZ-B
        Value: !Ref PrivateSubnet2
        Export:
            Name: !Sub ${EnvironmentName}-PRI-SN02
